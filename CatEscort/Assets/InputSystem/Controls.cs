//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Actions"",
            ""id"": ""6366ab2f-348f-43d3-b8fb-7cb105cc6afe"",
            ""actions"": [
                {
                    ""name"": ""Action Button"",
                    ""type"": ""Button"",
                    ""id"": ""b1055026-d398-4cd8-b354-eb99a5cc4e41"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left Button"",
                    ""type"": ""Button"",
                    ""id"": ""d59dadf8-b2ad-4150-b317-fcdfef5186dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right Button"",
                    ""type"": ""Button"",
                    ""id"": ""654d7202-809b-46bd-89ba-4ed8a40edd93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""52d75455-89c1-4156-92f7-743c816e8a08"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13d95971-fdac-4b79-9a23-2ea7d58cf6ee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f4eadad4-f392-455c-a5e0-d05c86a80191"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3aa1675-1169-4e0b-9257-107ecf518b1d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40852391-76bc-4139-a9d9-5dfb805097da"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right Button"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Actions
        m_Actions = asset.FindActionMap("Actions", throwIfNotFound: true);
        m_Actions_ActionButton = m_Actions.FindAction("Action Button", throwIfNotFound: true);
        m_Actions_LeftButton = m_Actions.FindAction("Left Button", throwIfNotFound: true);
        m_Actions_RightButton = m_Actions.FindAction("Right Button", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Actions
    private readonly InputActionMap m_Actions;
    private IActionsActions m_ActionsActionsCallbackInterface;
    private readonly InputAction m_Actions_ActionButton;
    private readonly InputAction m_Actions_LeftButton;
    private readonly InputAction m_Actions_RightButton;
    public struct ActionsActions
    {
        private @Controls m_Wrapper;
        public ActionsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ActionButton => m_Wrapper.m_Actions_ActionButton;
        public InputAction @LeftButton => m_Wrapper.m_Actions_LeftButton;
        public InputAction @RightButton => m_Wrapper.m_Actions_RightButton;
        public InputActionMap Get() { return m_Wrapper.m_Actions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsActions instance)
        {
            if (m_Wrapper.m_ActionsActionsCallbackInterface != null)
            {
                @ActionButton.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnActionButton;
                @ActionButton.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnActionButton;
                @ActionButton.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnActionButton;
                @LeftButton.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLeftButton;
                @LeftButton.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLeftButton;
                @LeftButton.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnLeftButton;
                @RightButton.started -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRightButton;
                @RightButton.performed -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRightButton;
                @RightButton.canceled -= m_Wrapper.m_ActionsActionsCallbackInterface.OnRightButton;
            }
            m_Wrapper.m_ActionsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ActionButton.started += instance.OnActionButton;
                @ActionButton.performed += instance.OnActionButton;
                @ActionButton.canceled += instance.OnActionButton;
                @LeftButton.started += instance.OnLeftButton;
                @LeftButton.performed += instance.OnLeftButton;
                @LeftButton.canceled += instance.OnLeftButton;
                @RightButton.started += instance.OnRightButton;
                @RightButton.performed += instance.OnRightButton;
                @RightButton.canceled += instance.OnRightButton;
            }
        }
    }
    public ActionsActions @Actions => new ActionsActions(this);
    public interface IActionsActions
    {
        void OnActionButton(InputAction.CallbackContext context);
        void OnLeftButton(InputAction.CallbackContext context);
        void OnRightButton(InputAction.CallbackContext context);
    }
}
